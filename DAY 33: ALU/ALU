module alu (
    input [3:0] a,      // 4-bit giriş verisi a
    input [3:0] b,      // 4-bit giriş verisi b
    input [2:0] opcode, // 3-bit işlem kodu
    output [7:0] rslt   // 8-bit sonuç verisi
);

    reg [7:0] rslt;      // 8-bit sonuç verisi

    // İşlem kodlarını tanımla
    parameter add_op = 3'b000,
              sub_op = 3'b001,
              mul_op = 3'b010,
              and_op = 3'b011,
              or_op  = 3'b100,
              not_op = 3'b101, // Negasyon (NOT)
              xor_op = 3'b110,
              xnor_op = 3'b111;

    // İşlemleri gerçekleştir
    always @ (a or b or opcode) begin
        case (opcode)
            add_op: rslt = a + b;
            sub_op: rslt = a - b;
            mul_op: rslt = a * b;
            and_op: rslt = a & b; // a AND b
            or_op: rslt = a | b;  // a OR b
            not_op: rslt = ~a;    // NOT a
            xor_op: rslt = a ^ b; // a XOR b
            xnor_op: rslt = ~(a ^ b); // a XNOR b (NOT(a XOR b))
        endcase
    end

endmodule

